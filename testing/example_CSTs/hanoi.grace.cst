Program start
  Func-def start
    Header start
      <id> = solve 
      <ret-type> = nothing  
    Header end
    Local-def start
      Func-def start
        Header start
          <id> = hanoi 
          <ret-type> = nothing  
          Fpar-def start
            <ref> : No
            <ids> : rings 
            Fpar-type start
              <data-type> : int  
            Fpar-type end
          Fpar-def end
          Fpar-def start
            <ref> : Yes
            <ids> : source , target , auxiliary 
            Fpar-type start
              <data-type> : char  
              Array indexes :[ ] 
            Fpar-type end
          Fpar-def end
        Header end
        Local-def start
          Func-def start
            Header start
              <id> = move 
              <ret-type> = nothing  
              Fpar-def start
                <ref> : Yes
                <ids> : source , target 
                Fpar-type start
                  <data-type> : char  
                  Array indexes :[ ] 
                Fpar-type end
              Fpar-def end
            Header end
            Block start
              stmt type:func-call start
                Func-call start
                  Function <id> : puts 
                  Parameters :
                    Expr_botom type:l-value start
                      l-value type:string start
                        <string> : "Moving from " 
                      l-value type:string end
                    Expr_bottom type:l-value end
                  Parameters end
                Func-call end
              stmt type:func-call end
              stmt type:func-call start
                Func-call start
                  Function <id> : puts 
                  Parameters :
                    Expr_botom type:l-value start
                      l-value type:id start
                        <id> : source 
                      l-value type:id end
                    Expr_bottom type:l-value end
                  Parameters end
                Func-call end
              stmt type:func-call end
              stmt type:func-call start
                Func-call start
                  Function <id> : puts 
                  Parameters :
                    Expr_botom type:l-value start
                      l-value type:string start
                        <string> : " to " 
                      l-value type:string end
                    Expr_bottom type:l-value end
                  Parameters end
                Func-call end
              stmt type:func-call end
              stmt type:func-call start
                Func-call start
                  Function <id> : puts 
                  Parameters :
                    Expr_botom type:l-value start
                      l-value type:id start
                        <id> : target 
                      l-value type:id end
                    Expr_bottom type:l-value end
                  Parameters end
                Func-call end
              stmt type:func-call end
              stmt type:func-call start
                Func-call start
                  Function <id> : puts 
                  Parameters :
                    Expr_botom type:l-value start
                      l-value type:string start
                        <string> : ".\n" 
                      l-value type:string end
                    Expr_bottom type:l-value end
                  Parameters end
                Func-call end
              stmt type:func-call end
            Block end
          Func-def end
        Local-def end
        Block start
          stmt type:if start
            If starting
              If header start
                Condbottom type:beq start
                  Expr_botom type:l-value start
                    l-value type:id start
                      <id> : rings 
                    l-value type:id end
                  Expr_bottom type:l-value end
                  Expr_bottom type:int-const start
                    <int-const> : 1 
                  Expr_bottom type:int-const end
                Condbottom type:beq end
              If header end
              If trail start (without else)
                stmt type:block start
                  Block start
                    stmt type:func-call start
                      Func-call start
                        Function <id> : hanoi 
                        Parameters :
                          Expr type:minus start
                            Expr_botom type:l-value start
                              l-value type:id start
                                <id> : rings 
                              l-value type:id end
                            Expr_bottom type:l-value end
                            Expr_bottom type:int-const start
                              <int-const> : 1 
                            Expr_bottom type:int-const end
                          Expr type:minus end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : source 
                            l-value type:id end
                          Expr_bottom type:l-value end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : auxiliary 
                            l-value type:id end
                          Expr_bottom type:l-value end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : target 
                            l-value type:id end
                          Expr_bottom type:l-value end
                        Parameters end
                      Func-call end
                    stmt type:func-call end
                    stmt type:func-call start
                      Func-call start
                        Function <id> : move 
                        Parameters :
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : source 
                            l-value type:id end
                          Expr_bottom type:l-value end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : target 
                            l-value type:id end
                          Expr_bottom type:l-value end
                        Parameters end
                      Func-call end
                    stmt type:func-call end
                    stmt type:func-call start
                      Func-call start
                        Function <id> : hanoi 
                        Parameters :
                          Expr type:minus start
                            Expr_botom type:l-value start
                              l-value type:id start
                                <id> : rings 
                              l-value type:id end
                            Expr_bottom type:l-value end
                            Expr_bottom type:int-const start
                              <int-const> : 1 
                            Expr_bottom type:int-const end
                          Expr type:minus end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : auxiliary 
                            l-value type:id end
                          Expr_bottom type:l-value end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : target 
                            l-value type:id end
                          Expr_bottom type:l-value end
                          Expr_botom type:l-value start
                            l-value type:id start
                              <id> : source 
                            l-value type:id end
                          Expr_bottom type:l-value end
                        Parameters end
                      Func-call end
                    stmt type:func-call end
                  Block end
                stmt type:block end
              If trail end (without else)
            If end
          stmt type:if end
        Block end
      Func-def end
    Local-def end
    Var-def start
      <ids>  : NumberOfRings 
      <type> : int  
    Var-def end
    Block start
      stmt type:func-call start
        Func-call start
          Function <id> : writeString 
          Parameters :
            Expr_botom type:l-value start
              l-value type:string start
                <string> : "Rings: " 
              l-value type:string end
            Expr_bottom type:l-value end
          Parameters end
        Func-call end
      stmt type:func-call end
      stmt type:assignment start
        <l-value> : NumberOfRings 
        l-value type:id start
          <id> : NumberOfRings 
        l-value type:id end
        Expr_botom type:func-call start
          Func-call start
            Function <id> : geti 
          Func-call end
        Expr_bottom type:func-call end
      stmt type:assignment end
      stmt type:func-call start
        Func-call start
          Function <id> : hanoi 
          Parameters :
            Expr_botom type:l-value start
              l-value type:id start
                <id> : NumberOfRings 
              l-value type:id end
            Expr_bottom type:l-value end
            Expr_botom type:l-value start
              l-value type:string start
                <string> : "left" 
              l-value type:string end
            Expr_bottom type:l-value end
            Expr_botom type:l-value start
              l-value type:string start
                <string> : "right" 
              l-value type:string end
            Expr_bottom type:l-value end
            Expr_botom type:l-value start
              l-value type:string start
                <string> : "middle" 
              l-value type:string end
            Expr_bottom type:l-value end
          Parameters end
        Func-call end
      stmt type:func-call end
    Block end
  Func-def end
Program end
