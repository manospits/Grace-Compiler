Program start
  Func-def start
    Header start
      <id> = main 
      <ret-type> = nothing  
    Header end
    Var-def start
      <ids>  : r 
      <type> : char [ 32 ]  
    Var-def end
    Local-def start
      Func-def start
        Header start
          <id> = reverse 
          <ret-type> = nothing  
          Fpar-def start
            <ref> : Yes
            <ids> : s 
            Fpar-type start
              <data-type> : char  
              Array indexes :[ ] 
            Fpar-type end
          Fpar-def end
        Header end
        Var-def start
          <ids>  : i , l 
          <type> : int  
        Var-def end
        Block start
          stmt type:assignment start
            <l-value> : l 
            l-value type:id start
              <id> : l 
            l-value type:id end
            Expr_botom type:func-call start
              Func-call start
                Function <id> : strlen 
                Parameters :
                  Expr_botom type:l-value start
                    l-value type:id start
                      <id> : s 
                    l-value type:id end
                  Expr_bottom type:l-value end
                Parameters end
              Func-call end
            Expr_bottom type:func-call end
          stmt type:assignment end
          stmt type:assignment start
            <l-value> : i 
            l-value type:id start
              <id> : i 
            l-value type:id end
            Expr_bottom type:int-const start
              <int-const> : 0 
            Expr_bottom type:int-const end
          stmt type:assignment end
          stmt type:while start
            While start
              Condbottom type:less start
                Expr_botom type:l-value start
                  l-value type:id start
                    <id> : i 
                  l-value type:id end
                Expr_bottom type:l-value end
                Expr_botom type:l-value start
                  l-value type:id start
                    <id> : l 
                  l-value type:id end
                Expr_bottom type:l-value end
              Condbottom type:less end
              stmt type:block start
                Block start
                  stmt type:assignment start
                    <l-value> : r [ i ] 
                    l-value type:l-value [] start
                      l-value type:id start
                        <id> : r 
                      l-value type:id end
                      Expr_botom type:l-value start
                        l-value type:id start
                          <id> : i 
                        l-value type:id end
                      Expr_bottom type:l-value end
                    l-value type:l-value [] end
                    Expr_botom type:l-value start
                      l-value type:l-value [] start
                        l-value type:id start
                          <id> : s 
                        l-value type:id end
                        Expr type:minus start
                          Expr type:minus start
                            Expr_botom type:l-value start
                              l-value type:id start
                                <id> : l 
                              l-value type:id end
                            Expr_bottom type:l-value end
                            Expr_botom type:l-value start
                              l-value type:id start
                                <id> : i 
                              l-value type:id end
                            Expr_bottom type:l-value end
                          Expr type:minus end
                          Expr_bottom type:int-const start
                            <int-const> : 1 
                          Expr_bottom type:int-const end
                        Expr type:minus end
                      l-value type:l-value [] end
                    Expr_bottom type:l-value end
                  stmt type:assignment end
                  stmt type:assignment start
                    <l-value> : i 
                    l-value type:id start
                      <id> : i 
                    l-value type:id end
                    Expr type:plus start
                      Expr_botom type:l-value start
                        l-value type:id start
                          <id> : i 
                        l-value type:id end
                      Expr_bottom type:l-value end
                      Expr_bottom type:int-const start
                        <int-const> : 1 
                      Expr_bottom type:int-const end
                    Expr type:plus end
                  stmt type:assignment end
                Block end
              stmt type:block end
            While end
          stmt type:while end
          stmt type:assignment start
            <l-value> : r [ i ] 
            l-value type:l-value [] start
              l-value type:id start
                <id> : r 
              l-value type:id end
              Expr_botom type:l-value start
                l-value type:id start
                  <id> : i 
                l-value type:id end
              Expr_bottom type:l-value end
            l-value type:l-value [] end
            Expr_botom type:char-const start
              <char-const> : '\0' 
            Expr_bottom type:char-const end
          stmt type:assignment end
        Block end
      Func-def end
    Local-def end
    Block start
      stmt type:func-call start
        Func-call start
          Function <id> : reverse 
          Parameters :
            Expr_botom type:l-value start
              l-value type:string start
                <string> : "\n!dlrow olleH" 
              l-value type:string end
            Expr_bottom type:l-value end
          Parameters end
        Func-call end
      stmt type:func-call end
      stmt type:func-call start
        Func-call start
          Function <id> : puts 
          Parameters :
            Expr_botom type:l-value start
              l-value type:id start
                <id> : r 
              l-value type:id end
            Expr_bottom type:l-value end
          Parameters end
        Func-call end
      stmt type:func-call end
    Block end
  Func-def end
Program end
