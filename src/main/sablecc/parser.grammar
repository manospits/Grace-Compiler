Package compiler;


Helpers
  empty = ;
  all = [0 .. 0xFFFF];
  sp = ' ';
  tab = '	';
  lf = 0x000a;
  cr = 0x000d;
  ff = 0x000c;
  ht = 0x0009;
  line_terminator = lf | cr | cr lf;
  backslash = '\';
  quote = ''';
  dquote = '"';
  white_space = (sp | ht | ff | line_terminator)*;
  number = ['0' ..'9'];
  letter = ['a' .. 'z'] | ['A' .. 'Z'];
  uscore = '_';
  notstar = [all - '*'];
  notstarslash = [notstar - '/'];
  hexdigit = ['a' .. 'f'] | ['A' .. 'F'] | ['0' .. '9'];
  escapeseq = backslash 'n' | backslash 't' | backslash 'r'
              | backslash '0' | backslash backslash
              | backslash quote | backslash dquote
              | backslash 'x' hexdigit hexdigit;
  not_common_char = cr | lf | backslash | quote | dquote;
  common_char = [[[all - [cr+lf]]-[backslash + quote]]-dquote];
  not_dollar = [all-'$'];
  not_dollar_line_terminator = [not_dollar-[cr+lf]];

Tokens
  white_space = white_space;
  t_tab      = tab;
  t_lf       = lf;
  t_cr       = cr;
  t_and      = 'and';
  t_char     = 'char';
  t_div      = 'div';
  t_do       = 'do';
  t_else     = 'else';
  t_fun      = 'fun';
  t_if       = 'if';
  t_int      = 'int';
  t_mod      = 'mod';
  t_nothing  = 'nothing';
  t_not      = 'not';
  t_or       = 'or';
  t_ref      = 'ref';
  t_return   = 'return';
  t_then     = 'then';
  t_var      = 'var';
  t_while    = 'while';
  t_id       = letter (letter | uscore | number)*;
  t_number   = (number)+;
  t_char_con = quote common_char quote | quote escapeseq quote;
  t_string  = dquote (common_char | escapeseq )* dquote;
  t_s_plus   = '+';
  t_s_minus  = '-';
  t_s_star   = '*';
  t_s_slash  = '/';
  t_s_hash   = '#';
  t_s_equal  = '=';
  t_s_leq    = '<=';
  t_s_beq    = '>=';
  t_s_less   = '<';
  t_s_bigger = '>';
  t_l_par    = '(';
  t_r_par    = ')';
  t_l_ar     = '[';
  t_r_ar     = ']';
  t_l_br     = '{';
  t_r_br     = '}';
  t_comma    = ',';
  t_semi     = ';';
  t_uddot    = ':';
  t_larrow   = '<-';
  t_l_comm   = '$' (not_dollar_line_terminator+ [all-[cr + lf]]*)* line_terminator ;
  t_ml_comm  = '$$' not_dollar* '$' ( not_dollar not_dollar* '$' )* '$';

Ignored Tokens
  white_space,t_lf,t_cr,t_tab,t_ml_comm,t_l_comm;

Productions

    //<program> = <func-def>
    program{-> program} = func_def {-> New program(func_def)};

    //<func-def> = <header> (<local_def>)* <block>
    func_def {-> func_def} =  header local_def* block {-> New func_def(header,[local_def],[block.stmt])};

    //<header> = "fun" <id> "("<fpar-def> (";" <fpar-def>)() ")" : <ret-type>
    header {-> header}   = t_fun t_id t_l_par header_members? t_r_par t_uddot ret_type {-> New header(t_id,[header_members.fpar_def],ret_type)};
    header_semi_fpardef {-> fpar_def} = t_semi fpar_def {-> fpar_def};
    header_members {-> fpar_def*} = fpar_def header_semi_fpardef* {-> [fpar_def,header_semi_fpardef.fpar_def]};

    //<fpar-def> = ["ref"] <id> (","<id>)* ":" <fpar-type>
    fpar_def {-> fpar_def} = t_ref? t_id id_comma* t_uddot fpar_type {-> New fpar_def(t_ref,[t_id,id_comma.t_id],fpar_type)};
    id_comma {-> t_id}= t_comma t_id {-> t_id};

    //<data-type> = "int" | "char"
    data_type {-> data_type}=
            {int} t_int {-> New data_type.int(t_int)}|
            {char} t_char {-> New data_type.char(t_char)};

    //<type> = <data-type> ("[" <int-const> "]")*
    type{-> type} = data_type array_dec*{-> New type(data_type,[array_dec.t_number])};
    array_dec{-> t_number} = t_l_ar t_number t_r_ar {-> t_number};

    //<ret-type> <data-type> | "nothing"
    ret_type {-> ret_type} =
            {ret_data_type} data_type {-> New ret_type.ret_data_type(data_type)}|
            {nothing} t_nothing {-> New ret_type.nothing(t_nothing)};

    //<fpar-type> = <data-type> ["[" "]"] ( "[" <int-const> "]")*
    fpar_type {-> fpar_type} = data_type fpar_type_t_ar_empty? fpar_type_t_ar* {-> New fpar_type(data_type,fpar_type_t_ar_empty,[fpar_type_t_ar.t_number])} ;
    fpar_type_t_ar_empty {-> fpar_type_t_ar_empty} = t_l_ar t_r_ar {-> New fpar_type_t_ar_empty(t_l_ar,t_r_ar)};
    fpar_type_t_ar {-> t_number} = t_l_ar t_number t_r_ar {-> t_number};

    //<local-def> = <func-def> | <func-decl> | <var-def>
    local_def {-> local_def}  =
        {func_def}   func_def  {-> New local_def.func_def(func_def)}   |
        {func_decl}  func_decl {-> New local_def.func_decl(func_decl)} |
        {var_def}    var_def {-> New local_def.var_def(var_def)};

    //<var-def> = "var" <id> (",",<id>)* ":" <type> ";"
    var_def {-> var_def}   = t_var t_id id_comma* t_uddot type t_semi{-> New var_def([t_id,id_comma.t_id],type)};

    //<func-decl> = <header> ";"
    func_decl{-> func_decl} = header t_semi{-> New func_decl(header)};

    //<stmt> = ";" | <l-value> "<-" <expr> ";" | <block> | <func_call> ";"
    //       | "if" <cond> "then" <stmt> [ "else" <stmt> ]
    //       | "while" <cond> "do" <stmt> | return [<expr>] ";"
    stmt =
            {stmt_semi} t_semi                         |
            {stmt_lvalue} l_value t_larrow expr t_semi |
            {stmt_block} block                         |
            {stmt_func_call} func_call t_semi          |
            {stmt_if} if                               |
            {stmt_return} t_return expr? t_semi        |
            {stmt_while} while;

    while = t_while cond t_do stmt;
    while_else = t_while cond t_do stmt_else;

    if = if_header if_trail;
    if_header = t_if cond t_then;
    if_trail =
            {without_else} stmt |
            {with_else} stmt_else t_else stmt;

    stmt_else =
            {stmt_else_semi} t_semi                         |
            {stmt_else_lvalue} l_value t_larrow expr t_semi |
            {stmt_else_block} block                         |
            {stmt_else_func_call} func_call t_semi          |
            {stmt_else_return} t_return expr? t_semi        |
            {stmt_else_if} if_else                          |
            {stmt_else_while} while_else;

    if_else = if_header [then]:stmt_else t_else [else]:stmt_else;


    //<block> = "{" (<stmt>)* "}"
    block{-> stmt*} = t_l_br stmt* t_r_br {-> [stmt]};

    //<func-call> = <id> "(" [ <expr> ( "," <expr> ) *] ")"
    func_call{-> func_call} = t_id t_l_par func_call_optional? t_r_par {-> New func_call(t_id,[func_call_optional.expr])};
    func_call_optional{-> expr*} = expr comma_expr* {-> [expr.expr, comma_expr.expr]};
    comma_expr {-> expr} = t_comma expr {-> expr};

    //<l-value> = <id> | <string-literal> | <l-value> "[" <expr> "]"
    l_value {-> l_value} =
        {l_value_id}       t_id    {-> New l_value.l_value_id(t_id)} |
        {l_value_string}   t_string {-> New l_value.l_value_string(t_string)} |
        {l_value_array}    l_value  t_l_ar expr t_r_ar {-> New l_value.l_value_array(l_value,expr)};

    //<expr> = <int-const> | <char-const> | <l-value> | <func-call> | "(" <expr> ")"
    //       | ( "+" | "-" ) <expr> ("+" | "-" | "*" | "div" | "mod" ) <expr>
    expr =
            {plus}  expr t_s_plus  expr_m {-> New expr.plus(expr,expr_m.expr)}|
            {minus} expr t_s_minus expr_m {-> New expr.minus(expr,expr_m.expr)}|
            {multdivmod} expr_m {-> expr_m.expr};

    expr_m {-> expr}=
            {post_mult} expr_m t_s_star expr_ipm {-> New expr.post_mult(expr_m.expr,expr_ipm.expr)}|
            {post_div}  expr_m t_div    expr_ipm {-> New expr.post_div(expr_m.expr,expr_ipm.expr)}|
            {post_mod}  expr_m t_mod    expr_ipm {-> New expr.post_mod(expr_m.expr,expr_ipm.expr)}|
            {infixplusminus}       expr_ipm {-> expr_ipm.expr};

    expr_ipm {-> expr}=
            {inplus}  t_s_plus  expr_bottom {-> New expr.inplus(expr_bottom.expr)}|
            {inminus} t_s_minus expr_bottom {-> New expr.inplus(expr_bottom.expr)}|
            {bottom} expr_bottom {-> expr_bottom.expr};

    expr_bottom{-> expr} =
            {const} t_number   {-> New expr.const(t_number)}                   |
            {char} t_char_con  {-> New expr.char(t_char_con)}                  |
            {func_call_type} func_call {-> New expr.func_call_type(func_call)} |
            {l_value_type} l_value {-> New expr.l_value_type(l_value)}         |
            {parenthesis} t_l_par expr t_r_par {-> New expr.parenthesis(expr)} ;

    //cond = "(" <cond> ")" | "not" <cond> | <cond> ("and" | "or" ) <cond>
    //     | <expr> ("=" | "#" | "<" | ">" "<=" | ">=") <expr>

    cond =
        {cond_or}    cond t_or condand|
        {cond_and}   condand;

    condand =
        {condand_and} condand t_and condnot|
        {cond_not}    condnot;

    condnot =
        {condnot_not} t_not cond_bottom|
        {cond_bottom} cond_bottom;

    cond_bottom =
        {cond_equal}  [left]:expr t_s_equal  [right]:expr |
        {cond_hash}   [left]:expr t_s_hash   [right]:expr |
        {cond_bigger} [left]:expr t_s_bigger [right]:expr |
        {cond_less}   [left]:expr t_s_less   [right]:expr |
        {cond_leq}    [left]:expr t_s_leq    [right]:expr |
        {cond_beq}    [left]:expr t_s_beq    [right]:expr |
        {cond_par}    [left]:t_l_par cond t_r_par;

Abstract Syntax Tree

 program = header local_def* stmt*;

 func_def =  header local_def* stmt*;

 header = t_id fpar_def* ret_type;

 fpar_def = t_ref? t_id* fpar_type;

 data_type =
        {int} t_int |
        {char} t_char;

 type = data_type t_number*;

 ret_type =
    {ret_data_type} data_type |
    {nothing} t_nothing;

 fpar_type = data_type fpar_type_t_ar_empty? t_number* ;
 fpar_type_t_ar_empty = t_l_ar t_r_ar;
 fpar_type_t_ar = t_number;

 local_def =
    {func_def}   func_def  |
    {func_decl}  func_decl |
    {var_def}    var_def;

 var_def =  t_id* type;

 func_decl = header;

 func_call = t_id expr*;

 l_value =
    {l_value_id}       t_id     |
    {l_value_string}   t_string |
    {l_value_array}    l_value   expr;

 expr =
    {plus}         [left]:expr  [right]:expr|
    {minus}        [left]:expr  [right]:expr|
    {post_mult}    [left]:expr  [right]:expr|
    {post_div}     [left]:expr  [right]:expr|
    {post_mod}     [left]:expr  [right]:expr|
    {inplus}       expr                     |
    {inminus}      expr                     |
    {const}        t_number                 |
    {char}         t_char_con               |
    {func_call_type} func_call              |
    {l_value_type}   l_value                |
    {parenthesis}    expr;


